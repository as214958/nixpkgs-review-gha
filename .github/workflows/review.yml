name: review
run-name: "review #${{ inputs.pr }}${{ inputs.extra-args && format(' ({0})', inputs.extra-args) || '' }}"

permissions: {}

env:
  PR_NUMBER: ${{ inputs.pr }}

on:
  workflow_dispatch:
    inputs:
      pr:
        description: "Pull Request Number"
        required: true
        type: string
      x86_64-linux:
        description: "Run on x86_64-linux"
        required: true
        type: boolean
        default: true
      extra-args:
        description: "nixpkgs-review extra args"
        required: false
        type: string
      post-result:
        description: "Post Result"
        required: true
        type: boolean
        default: true
      on-success:
        description: "What to do on review success"
        required: true
        type: choice
        default: nothing
        options:
          - nothing
          - mark_as_ready
          - approve
          - merge

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      pr: ${{ steps.pr.outputs.pr }}
      head: ${{ steps.pr.outputs.head }}
      merge: ${{ steps.pr.outputs.merge }}
      author_id: ${{ steps.pr.outputs.author_id }}

    steps:
      - name: get pr
        id: pr
        run: |
          while true; do
            pr="$(gh api "/repos/NixOS/nixpkgs/pulls/$PR_NUMBER")"
            jq -e '.mergeable_state == "unknown" and (.merged | not)' <<< "$pr" > /dev/null || break
            echo "mergeable state not known yet, retrying..."
            sleep 2
          done
          jq -- <<< "$pr"
          if [[ "$(jq '.merged or .mergeable' <<< "$pr")" != "true" ]]; then
            echo "::error::PR is not mergeable"
            exit 1
          fi
          echo "pr=$pr" >> "$GITHUB_OUTPUT"
          echo "head=$(jq -r '.head.sha' <<< "$pr")" >> "$GITHUB_OUTPUT"
          echo "merge=$(jq -r '.merge_commit_sha' <<< "$pr")" >> "$GITHUB_OUTPUT"
          echo "author_id=$(jq -r '.user.id' <<< "$pr")" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

  review:
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix:
        system:
          - x86_64-linux
        exclude:
          - system: ${{ !inputs.x86_64-linux && 'x86_64-linux' || '' }}
    runs-on: self-hosted
    steps:
      - name: clone nixpkgs
        uses: actions/checkout@v4
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          persist-credentials: false

      - name: run nix run nixpkgs#nixpkgs-review ${{ inputs.extra-args }}
        run: |
          nix run nixpkgs#nixpkgs-review -- \
            pr ${PR_NUMBER} \
            --no-shell \
            --no-headers \
            --print-result \
            --build-args="-L" \
            $EXTRA_ARGS \
            || true
        working-directory: nixpkgs
        env:
          GITHUB_TOKEN: ${{ github.token }}
          EXTRA_ARGS: ${{ inputs.extra-args }}
          PR_JSON: ${{ needs.prepare.outputs.pr }}

      - name: generate report
        id: report
        run: |
          if [[ -s fetch_cmd ]]; then
            cat fetch_cmd
            echo fetch_cmd_${{ matrix.system }}=$(base64 -w0 fetch_cmd) >> "$GITHUB_OUTPUT"
          fi
          dir=~/.cache/nixpkgs-review/pr-${PR_NUMBER}
          if [[ "$OS" != "Linux" ]]; then
            sandbox=$(nix config show sandbox)
            sed -i '/^###/s/$/ (sandbox = '"$sandbox"')/' "$dir/report.md"
          fi
          if ! [[ -s "$dir/report.md" ]]; then
            echo -e "\n---" >> "$dir/report.md"
            echo "### \`${{ matrix.system }}\`" >> "$dir/report.md"
            echo ":white_check_mark: *No rebuilds*" >> "$dir/report.md"
          fi
          cat $dir/report.md >> $GITHUB_STEP_SUMMARY
          report=$(nix run nixpkgs#jq -- -c '.+{$md}' $dir/report.json --rawfile md $dir/report.md | base64 -w0)
          echo report_${{ matrix.system }}=$report >> "$GITHUB_OUTPUT"
        env:
          OS: ${{ runner.os }}
